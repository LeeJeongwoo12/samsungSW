// memory overflow

#include <iostream>
#include <string>
#include <map>
#include <algorithm>

#define toString(x) #x

enum number {
	ZRO, ONE, TWO, THR, FOR, FIV, SIX, SVN, EGT, NIN
};

using namespace std;

string getString(number num) {
	map<number, string> etos{
	{ZRO, "ZRO"}, {ONE, "ONE"}, {TWO, "TWO"}, {THR, "THR"},{FOR, "FOR"},
	{FIV, "FIV"},{SIX, "SIX"}, {SVN, "SVN"}, {EGT,"EGT"}, {NIN, "NIN"}
	};
	auto x = etos.find(num);

	if (x != end(etos)) {
		return x->second; // enum index return
	}
	throw invalid_argument("s");
}

number getEnumIndex(string str) {
	map<string, number> stoe{
	{"ZRO", ZRO}, {"ONE", ONE}, {"TWO", TWO}, {"THR", THR},{"FOR", FOR},
	{"FIV", FIV},{"SIX", SIX}, {"SVN", SVN}, {"EGT", EGT}, {"NIN", NIN}
	};
	auto x = stoe.find(str);

	if (x != end(stoe)) {
		return x->second; // enum index return
	}
	throw invalid_argument("s");
}

int main(int argc, char** argv)
{
	int test_case;
	int T;
	scanf("%d", &T);
	for (test_case = 1; test_case <= T; ++test_case)
	{
		int num, len;
		char trash;
		getchar();
		scanf("%c%d %d", &trash, &num, &len);
		
		number *arr = new number[len];
		for (int i = 0; i < len; i++) {
			string input;
			cin >> input;

			arr[i] = getEnumIndex(input);
		}
		
		printf("#%d\n", test_case);

		for (int i = 0; i < len; i++) {
			cout << getString(arr[i]) << " ";
		}
		cout << endl;
	}
	return 0;
}